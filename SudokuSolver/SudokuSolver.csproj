<Project Sdk="Microsoft.NET.Sdk">
  <PropertyGroup>
    <OutputType>WinExe</OutputType>
    <TargetFramework>net6.0-windows10.0.19041.0</TargetFramework>
    <TargetPlatformMinVersion>10.0.17763.0</TargetPlatformMinVersion>
    <RootNamespace>Sudoku</RootNamespace>
    <ApplicationManifest>app.manifest</ApplicationManifest>
    <Platforms>x86;x64;ARM64</Platforms>
    <RuntimeIdentifiers>win10-x86;win10-x64;win10-arm64</RuntimeIdentifiers>
    <PublishProfile>win10-$(Platform).pubxml</PublishProfile>
    <UseWinUI>true</UseWinUI>
    <EnableMsixTooling>true</EnableMsixTooling>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
    <ApplicationIcon>Resources\app.ico</ApplicationIcon>
    <ProduceReferenceAssembly>False</ProduceReferenceAssembly>
    <PackageIcon>app.ico</PackageIcon>
    <AssemblyVersion>1.5.0.0</AssemblyVersion>
    <FileVersion>1.5.0.0</FileVersion>
    <LangVersion>10</LangVersion>
	  
	<!-- WindowsAppSDKSelfContained is a work around for a dependency problem with packaged and unpackaged builds -->
    <!-- It results in a DLL not found error when loading the Microsoft.ui.xaml.dll in the bootstrap code -->
    <!-- if the SDK Build Tools nuget package is included then packaged works and unpackaged fails -->
    <!-- if the SDK Build Tools nuget package is omitted then packaged fails and unpacked works -->
    <WindowsAppSDKSelfContained>true</WindowsAppSDKSelfContained>
  </PropertyGroup>

	

	

  <ItemGroup>
    <EmbeddedResource Include="Resources\about_dark.png" />
    <EmbeddedResource Include="Resources\about_light.png" />
    <EmbeddedResource Include="Resources\app.png" />
  </ItemGroup>

    <ItemGroup>
      <Content Include="Assets\SplashScreen.scale-200.png" />
      <Content Include="Assets\LockScreenLogo.scale-200.png" />
      <Content Include="Assets\Square150x150Logo.scale-200.png" />
      <Content Include="Assets\Square44x44Logo.scale-200.png" />
      <Content Include="Assets\Square44x44Logo.targetsize-24_altform-unplated.png" />
      <Content Include="Assets\StoreLogo.png" />
      <Content Include="Assets\Wide310x150Logo.scale-200.png" />
      <Content Include="Resources\app.ico" />
    </ItemGroup>


  <ItemGroup>
    <PackageReference Include="Microsoft.Windows.CsWin32" Version="0.2.164-beta">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.WindowsAppSDK" Version="1.2.221209.1" />
	<PackageReference Include="Microsoft.Windows.SDK.BuildTools" Version="10.0.22621.755" />
	<Manifest Include="$(ApplicationManifest)" />
  </ItemGroup>

	
	
	
	
 <!-- 
    Defining the "Msix" ProjectCapability here allows the Single-project MSIX Packaging
    Tools extension to be activated for this project even if the Windows App SDK Nuget
    package has not yet been restored.
  -->
  <ItemGroup Condition="'$(DisableMsixProjectCapabilityAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
    <ProjectCapability Include="Msix" />
  </ItemGroup>
  <!-- 
    Defining the "HasPackageAndPublishMenuAddedByProject" property here allows the Solution 
    Explorer "Package and Publish" context menu entry to be enabled for this project even if 
    the Windows App SDK Nuget package has not yet been restored.
  -->
  <PropertyGroup Condition="'$(DisableHasPackageAndPublishMenuAddedByProject)'!='true' and '$(EnableMsixTooling)'=='true'">
    <HasPackageAndPublishMenu>true</HasPackageAndPublishMenu>
  </PropertyGroup>
</Project>

